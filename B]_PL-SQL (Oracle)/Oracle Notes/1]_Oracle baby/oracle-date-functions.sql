-- Oracle Date Functions

Function	Example	Result	Description
ADD_MONTHS	ADD_MONTHS( DATE '2016-02-29', 1 )	     31-MAR-16	                Add a number of months (n) to a date and return the same day which is n of months away.
LAST_DAY    LAST_DAY( DATE '2016-02-29' )	         29-FEB-16	                  Return the last day of the month for a date.
TO_CHAR	    TO_CHAR( DATE'2017-01-01', 'DL' )	     Sunday, January 01, 2017	    Convert a DATE or an INTERVAL value to a character string in a specified format.
TO_DATE	    TO_DATE( '01 Jan 2017', 'DD MON YYYY' )	 01-JAN-17	                Convert a date which is in the character string to a DATE value.
NEXT_DAY  NEXT_DAY( DATE '2017-01-01', 'MONDAY' )	 02-JAN-17	                  Return the date of the next specified day of the week that comes after a date.
TRUNC	    TRUNC(DATE '2017-07-16', 'MM')	         01-JUL-17	                  Return a date truncated to a specific unit of measure.
CURRENT_DATE	RETURN the current data format '06-AUG-2017 19:43:44'
CURRENT_TIMESTAMP  ->  '06-AUG-17 08.26.52.742000000 PM -07:00'
DBTIMEZONE 	  ->   -07:00
EXTRACT EXTRACT(YEAR FROM SYSDATE)  ->	 2017; EXTRACT ( year/month/date/DOW FROM SYSDATE)
MONTHS_BETWEEN   MONTHS_BETWEEN( DATE '2017-07-01', DATE '2017-01-01' ) -> 6







SELECT ADD_MONTHS(SYSDATE, 1) AS project_due_date FROM dual;
SELECT ADD_MONTHS(DATE '2016-02-20', 1) AS project_due_date FROM dual;


-- TO_CHAR
/* 
DD for day of month.
MM for month.
YYYY for year.
HH for hour.
MI for minute.
SS for second. 

TO_CHAR(123.456, '$0,0.00')
TO_CHAR(SYSDATE, 'DD-MON-YYYY')
RTRIM(TO_CHAR(l_date, 'Day')) = 'Sunday'
*/



CREATE TABLE audits (
      audit_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      table_name       VARCHAR2(255),
      transaction_name VARCHAR2(10),
      by_user          VARCHAR2(30),
      transaction_date DATE
);

CREATE OR REPLACE TRIGGER customers_audit_trg
    AFTER 
    UPDATE OR DELETE ON customers
    FOR EACH ROW    
DECLARE
  l_transaction VARCHAR2(10);
BEGIN
  -- determine the transaction type
  l_transaction := CASE  
                    WHEN UPDATING THEN 'UPDATE'
                        WHEN DELETING THEN 'DELETE'
                  END;

  -- insert a row into the audit table   
  INSERT INTO audits (table_name, transaction_name, by_user, transaction_date)
  VALUES('CUSTOMERS', l_transaction, USER, SYSDATE);
END;
/

-- Oracle Row-level Triggers
CREATE OR REPLACE TRIGGER trigger_name
    BEFORE | AFTER
    INSERT OR DELETE OR UPDATE OF column1, column2, …
    ON table_name
    FOR EACH ROW
    REFERENCING OLD AS old_name
    NEW AS new_name
    WHEN (condition)
DECLARE
    …
BEGIN
    …
EXCEPTION
    …
END;
/

-- sudo record: :NEW OR :OLD 

/*
BEFORE
  insert :NEW
  update :NEW, :OLD
  delete :OLD

*/

-- need to pratice: https://youtu.be/i5fw-67P3XY?si=c8gDkdOw-Ml5CWpe