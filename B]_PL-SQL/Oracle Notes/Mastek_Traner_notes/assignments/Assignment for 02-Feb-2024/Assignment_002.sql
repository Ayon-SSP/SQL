-- Create an user name "assignmentUser" 
-- Connect to "assignmentUser".

-- Create all entities/tables found 3nf of Assignment_001.
-- product_info
-- product_id(pk)	product_desc	product_price
-- 101              Laptop	        1200.00
-- 102              Smartphone	    700.00
-- 103              Headphones	    50.00
-- 104              Tablet	        300.00
-- 105              Printer	        200.00

-- customer_info		
-- customer_id(pk)	customer_name	customer_state
-- 201              John Smith	    California
-- 202              Alice Johnson	New York
-- 203              Bob Miller	    Texas
-- 204              Emily Brown	    Florida
-- 205              Daniel Kim	    Illinois

-- order_info		
-- order_id(pk)     order_date	    customer_id(fk) 
-- 301	            2024-02-01      201
-- 302	            2024-02-02      202
-- 303	            2024-02-03      203
-- 304	            2024-02-04      204
-- 305	            2024-02-05      205

-- order_Product		
-- order_id(fk)     product_id(fk) 	quantity
-- 301              101	            2
-- 301              103	            1
-- 302              102	            3
-- 303              105	            1
-- 304              104	            2
-- 305              101	            1
-- 305              103	            2

-- While creating the tables ensure to consider all Constraints are used.


-- Create an user name "assignmentUser"
alter session set "_ORACLE_SCRIPT"=true;
CREATE USER assignmentUser IDENTIFIED BY 321654;

-- dba_users display

GRANT SELECT ANY DICTIONARY TO assignmentUser;

SELECT 
		username, 
		default_tablespace, 
		profile, 
		authentication_type
	FROM
		dba_users 
	WHERE 
		account_status = 'OPEN'
	ORDER BY
		username; 

-- grant connect to assignmentUser
-- DCL: Grant Control
grant create session to assignmentUser;     
grant create table to assignmentUser; 
grant create view to assignmentUser;
grant create any trigger to assignmentUser;
grant create any procedure to assignmentUser;
grant create SEQUENCE to assignmentUser;
grant create SYNONYM to assignmentUser;
grant all PRIVILEGES to assignmentUser;
grant connect to assignmentUser;
grant RESOURCE to assignmentUser;
grant dba to assignmentUser;

-- drop user assignmentUser
drop user assignmentUser;

-- Create all entities/tables found 3nf of Assignment_001.

-- product_info
CREATE TABLE product_info (
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY
    START WITH 101 PRIMARY KEY,
    product_desc VARCHAR2( 50 ) NOT NULL,
    product_price NUMBER( 8, 2 ) NOT NULL
);

-- customer_info
CREATE TABLE customer_info (
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY
    START WITH 201 PRIMARY KEY,
    customer_name VARCHAR2( 50 ) NOT NULL,
    customer_state VARCHAR2( 50 ) NOT NULL
);

-- order_info
CREATE TABLE order_info (
    order_id NUMBER GENERATED BY DEFAULT AS IDENTITY
    START WITH 301 PRIMARY KEY,
    order_date DATE NOT NULL,
    customer_id NUMBER NOT NULL,
    CONSTRAINT fk_order_info_customer_info 
        FOREIGN KEY ( customer_id )
        REFERENCES customer_info ( customer_id )
        ON DELETE SET NULL
);

-- order_Product
CREATE TABLE order_Product (
    product_id NUMBER NOT NULL,
    order_id NUMBER NOT NULL,
    quantity NUMBER NOT NULL,
    CONSTRAINT pk_order_Product 
        PRIMARY KEY ( product_id, order_id ),
    CONSTRAINT fk_order_Product_product_info 
        FOREIGN KEY ( product_id )
        REFERENCES product_info ( product_id )
        ON DELETE SET NULL,
    CONSTRAINT fk_order_Product_order_info 
        FOREIGN KEY ( order_id )
        REFERENCES order_info ( order_id )
        ON DELETE SET NULL
);

-- Select all data from all tables
SELECT * FROM product_info;
SELECT * FROM customer_info;
SELECT * FROM order_info;
SELECT * FROM order_Product;

-- Drop the tables
DROP TABLE order_Product;
DROP TABLE order_info;
DROP TABLE customer_info;
DROP TABLE product_info;

-- Insert data into product_info table
INSERT INTO product_info (product_id, product_desc, product_price) VALUES (101, 'Laptop', 1200.00);
INSERT INTO product_info (product_id, product_desc, product_price) VALUES (102, 'Smartphone', 700.00);
INSERT INTO product_info (product_id, product_desc, product_price) VALUES (103, 'Headphones', 50.00);
INSERT INTO product_info (product_id, product_desc, product_price) VALUES (104, 'Tablet', 300.00);
INSERT INTO product_info (product_id, product_desc, product_price) VALUES (105, 'Printer', 200.00);

-- Insert data into customer_info table
INSERT INTO customer_info (customer_id, customer_name, customer_state) VALUES (201, 'John Smith', 'California');
INSERT INTO customer_info (customer_id, customer_name, customer_state) VALUES (202, 'Alice Johnson', 'New York');
INSERT INTO customer_info (customer_id, customer_name, customer_state) VALUES (203, 'Bob Miller', 'Texas');
INSERT INTO customer_info (customer_id, customer_name, customer_state) VALUES (204, 'Emily Brown', 'Florida');
INSERT INTO customer_info (customer_id, customer_name, customer_state) VALUES (205, 'Daniel Kim', 'Illinois');

-- Insert data into order_info table
INSERT INTO order_info (order_id, order_date, customer_id) VALUES (301, TO_DATE('2024-02-01', 'YYYY-MM-DD'), 201);
INSERT INTO order_info (order_id, order_date, customer_id) VALUES (302, TO_DATE('2024-02-02', 'YYYY-MM-DD'), 202);
INSERT INTO order_info (order_id, order_date, customer_id) VALUES (303, TO_DATE('2024-02-03', 'YYYY-MM-DD'), 203);
INSERT INTO order_info (order_id, order_date, customer_id) VALUES (304, TO_DATE('2024-02-04', 'YYYY-MM-DD'), 204);
INSERT INTO order_info (order_id, order_date, customer_id) VALUES (305, TO_DATE('2024-02-05', 'YYYY-MM-DD'), 205);

-- Insert data into order_Product table
INSERT INTO order_Product (product_id, order_id, quantity) VALUES (101, 301, 2);
INSERT INTO order_Product (product_id, order_id, quantity) VALUES (103, 301, 1);
INSERT INTO order_Product (product_id, order_id, quantity) VALUES (102, 302, 3);
INSERT INTO order_Product (product_id, order_id, quantity) VALUES (105, 303, 1);
INSERT INTO order_Product (product_id, order_id, quantity) VALUES (104, 304, 2);
INSERT INTO order_Product (product_id, order_id, quantity) VALUES (101, 305, 1);
INSERT INTO order_Product (product_id, order_id, quantity) VALUES (103, 305, 2);

-- 1. Select all products with a price greater than $100
SELECT product_id, product_id
FROM product_info 
WHERE product_price > 100;

-- 2. Retrieve orders placed after '2024-02-02' //and also give the product_desc whith it's product_id
SELECT *
FROM order_info
WHERE order_date > TO_DATE('2024-02-02', 'YYYY-MM-DD');
-- -<or>-
SELECT order_info.order_id, order_product.product_id, product_info.product_desc
FROM order_info
JOIN order_Product
ON order_info.order_id = order_Product.order_id
JOIN product_info
ON order_Product.product_id = product_info.product_id
WHERE order_date > TO_DATE('2024-02-02', 'YYYY-MM-DD');


-- 3. List customers from 'New York'
SELECT customer_name
FROM customer_info
WHERE customer_state = 'New York';

-- 4. Show products and their quantities where quantity is not null
SELECT product_id, quantity
from  order_Product
WHERE quantity IS NOT NULL;

-- 5. Retrieve orders placed by customers from 'California'
SELECT *
FROM customer_info
WHERE customer_state = 'California';
-- -<or>-
SELECT *
FROM product_info
WHERE product_id IN (
    SELECT product_id
    FROM order_Product
    WHERE order_id IN (
        SELECT order_id
        FROM order_info
        WHERE customer_id IN (
            SELECT customer_id 
            FROM customer_info 
            WHERE customer_state = 'California'
        )
    )
);

-- 6. Find products with a price less than or equal to $200 and in stock
SELECT *
FROM product_info
WHERE product_price <= 200;

-- 7. Calculate the total quantity of products in all orders
SELECT SUM(quantity) AS total_quantity
FROM order_Product;

-- 8. Display distinct product descriptions
SELECT DISTINCT product_desc
FROM product_info;

-- 9. Find the average price of products
SELECT AVG(product_price) AS average_price
FROM product_info;

-- 10. Show products and their quantities, replacing null quantities with 0 
SELECT product_id, NVL(quantity, 0) AS quantity
FROM order_Product;

-- 11. Retrieve the first 5 products in the Product_Info table
SELECT *
FROM product_info
WHERE ROWNUM <= 5;

-- 12. Display orders with quantities sorted in descending order:
SELECT order_id, quantity
FROM order_Product
ORDER BY quantity DESC;

-- 13. Retrieve products with descriptions containing 'Phone'
SELECT product_id, product_desc
FROM product_info
WHERE product_desc LIKE '%Phone%';

-- 14. Find customers in 'California' or 'New York'
SELECT customer_name, customer_state
FROM customer_info
WHERE customer_state IN ('California', 'New York');

-- 15. Show products with prices between $100 and $500
SELECT product_id, product_desc, product_price
FROM product_info
WHERE product_price BETWEEN 100 AND 500;

-- 16. List orders placed between '2024-02-02' and '2024-02-05'
SELECT order_id, order_date
FROM order_info
WHERE order_date BETWEEN TO_DATE('2024-02-02', 'YYYY-MM-DD') AND TO_DATE('2024-02-05', 'YYYY-MM-DD');

-- 17. Retrieve orders with quantities not between 1 and 5
SELECT order_id, quantity
FROM order_Product
WHERE quantity NOT BETWEEN 1 AND 5;

-- 18. Display products with prices increased by 10%
SELECT product_id, product_desc, product_price * 1.1 AS increased_price
FROM product_info;

-- 19. Find the average quantity of products in orders
SELECT AVG(quantity) AS average_quantity
FROM order_Product;

-- 20. Show orders with dates one week ahead of '2024-02-01'
SELECT order_id, order_date
FROM order_info
WHERE order_date BETWEEN TO_DATE('2024-02-01', 'YYYY-MM-DD') AND TO_DATE('2024-02-01', 'YYYY-MM-DD') + 7;

-- 21. List customers with names in uppercase
SELECT UPPER(customer_name) AS customer_name
FROM customer_info;

-- 22. Retrieve products with descriptions starting with 'Lap'
SELECT product_id, product_desc
FROM product_info
WHERE product_desc LIKE 'Lap%';
-- 23. Find customers with names ending in 'son'
SELECT customer_name
FROM customer_info
WHERE customer_name LIKE '%son';

-- 24. Display orders placed on the last day of each month
SELECT *
FROM order_info
WHERE  EXTRACT(DAY FROM order_date  + 1) = 1;
-- using last_day function
SELECT *
FROM order_info
WHERE order_date = LAST_DAY(order_date);

-- 25. Show products with prices rounded to the nearest integer
SELECT product_id, product_desc, ROUND(product_price) AS rounded_price
FROM product_info;

-- 26. Retrieve customers with states replaced by their first two characters
SELECT customer_name, SUBSTR(customer_state, 1, 2) AS state
FROM customer_info;

-- 27. List orders with quantities multiplied by 2
SELECT order_id, quantity * 2 AS multiplied_quantity
FROM order_Product;