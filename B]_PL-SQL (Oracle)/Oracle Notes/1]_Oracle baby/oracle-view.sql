/*
* refere gaurav's notes romee
* view's are also called as virtual tables.
*     (Virtual/logical table) or 
*     (database object) 
*     (virtual entity) 
*     (no space is taken, extract data from table) 
*     (slow results because it renders the info from the exst table) 
*     dependent logical object
*     may or may not allow DML
* only the definition of a view is stored in the data dictionary, it doew not actually exist as a separate tables
* Oracle allows the creation of an object called view
* Types of Views
*     Simple View: contains only one table, no group by, no aggregate functions, no subqueries
*     Complex View: contains more than one table, group by, aggregate functions, subqueries
*     Read Only View(Non-updatable view): (only allows SELECT)does not allow DML operations
*     Updatable View: allows DML operations
*           (INSERT, UPDATE, DELETE are actually happening on the table on which it is created), 
*           (thease view contains pk and all not null columns of the base table)  
*           syntzx: WITH CHECK OPTION;
*     Inline View: a subquery in the FROM clause of a SELECT statement
*     Materialized View: stores the result of a query in a table, stores the definition and data, if changed then replaced
*           oracle uses materialized view it creates a snapshorts in prior.
            create materialized view mview as select ...;

* Views can be updated under followings: If the view consists of the primary key of the table based on which the view has been created. If the view is defined based on one and only one table.
* "WITH CHECK OPTION" ensures that any data modification made through a view meets the criteria specified by the view's query. It prevents inserting, updating, or deleting rows that do not satisfy the view's filtering conditions.
*/
CREATE VIEW employee_yos AS
SELECT first_name || ' ' || last_name AS employee_name, CURRENT_DATE
FROM customers_S2;


CREATE OR REPLACE VIEW employee_yos (employee_name, toDay) AS
SELECT first_name || ' ' || last_name AS employee_name, CURRENT_DATE
FROM customers_S2
ORDER BY employee_name;

DROP VIEW employee_yos;


SELECT * FROM employee_yos;

CREATE OR REPLACE VIEW backlogs AS
SELECT 
    product_name,
    EXTRACT( YEAR from order_date) YEAR,
    SUM(quantity * unit_price) amount
FROM orders
INNER JOIN order_items USING(order_id)
INNER JOIN products USING(product_id)
WHERE status = 'Pending'
GROUP BY EXTRACT(YEAR FROM order_data), product_name;


-- update or delete
UPDATE or DELETE employee_yos
[same as tables];


-- create a materialized view emp
CREATE MATERIALIZED VIEW MempView AS
SELECT * FROM emp; -- base tables and stored on the disk

-- faster in execution



-- Inline View in Oracle
-- a subquery in the FROM clause of a SELECT statement






DROP TABLE cars;
DROP TABLE brands;


SELECT * FROM CARS;
SELECT * FROM BRANDS;

CREATE TABLE brands(
	brand_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
	brand_name VARCHAR2(50) NOT NULL,
	PRIMARY KEY(brand_id)
);

CREATE TABLE cars (
	car_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
	car_name VARCHAR2(255) NOT NULL,
	brand_id NUMBER NOT NULL,
	PRIMARY KEY(car_id),
	FOREIGN KEY(brand_id) 
        REFERENCES brands(brand_id) ON DELETE CASCADE
);

INSERT INTO brands(brand_name)
VALUES('Audi');

INSERT INTO brands(brand_name)
VALUES('BMW');

INSERT INTO brands(brand_name)
VALUES('Ford');

INSERT INTO brands(brand_name)
VALUES('Honda');

INSERT INTO brands(brand_name)
VALUES('Toyota');

INSERT INTO cars (car_name,brand_id)
VALUES('Audi R8 Coupe',1);

INSERT INTO cars (car_name,brand_id)
VALUES('Audi Q2', 1);

INSERT INTO cars (car_name,brand_id)
VALUES('Audi S1', 1);

INSERT INTO cars (car_name,brand_id)
VALUES('BMW 2-serie Cabrio',2);

INSERT INTO cars (car_name,brand_id)
VALUES('BMW i8', 2);

INSERT INTO cars (car_name,brand_id)
VALUES('Ford Edge',3);

INSERT INTO cars (car_name,brand_id)
VALUES('Ford Mustang Fastback', 3);

INSERT INTO cars (car_name,brand_id)
VALUES('Honda S2000', 4);

INSERT INTO cars (car_name,brand_id)
VALUES('Honda Legend', 4);

INSERT INTO cars (car_name,brand_id)
VALUES('Toyota GT86', 5);

INSERT INTO cars (car_name,brand_id)
VALUES('Toyota C-HR', 5);


CREATE OR REPLACE VIEW cars_master AS 
    SELECT
        car_id,
        car_name
    FROM
        cars;

SELECT * FROM cars_master;

DELETE
FROM
    cars_master
WHERE
    car_id = 2;

SELECT * FROM cars_master;