-- School schema
CREATE TABLE student (
    student_id NUMBER GENERATED BY DEFAULT AS IDENTITY
    START WITH 1 PRIMARY KEY,
    student_name VARCHAR2( 50 ) NOT NULL
);

-- Create faculty table
CREATE TABLE faculty (
    faculty_id NUMBER GENERATED BY DEFAULT AS IDENTITY
    START WITH 1 PRIMARY KEY,
    faculty_name VARCHAR2( 50 ) NOT NULL,
    faculty_phone VARCHAR2( 20 ) NOT NULL
);

-- Create course table
CREATE TABLE course (
    course_id VARCHAR2( 5 ) PRIMARY KEY,
    faculty_id NUMBER NOT NULL,               -- fk
    course_name VARCHAR2( 50 ) NOT NULL,
    CONSTRAINT fk_course_faculty 
        FOREIGN KEY( faculty_id )
        REFERENCES faculty( faculty_id ) 
        ON DELETE SET NULL
);

-- Create students_grade table
CREATE TABLE students_grade (
    student_id NUMBER NOT NULL,              -- fk
    course_id VARCHAR2( 5 ) NOT NULL,         -- fk
    student_grade VARCHAR2( 2 ) NOT NULL,
    CONSTRAINT pk_students_grade 
        PRIMARY KEY ( student_id, course_id ),
    CONSTRAINT fk_students_grade_student_id 
        FOREIGN KEY( student_id )
        REFERENCES student( student_id ) 
        ON DELETE CASCADE,
    CONSTRAINT fk_students_grade_course_id 
        FOREIGN KEY( course_id )
        REFERENCES course( course_id ) 
        ON DELETE CASCADE
);

-- Insert data into student table
INSERT INTO student ( student_name ) VALUES ( 'Adams' );
INSERT INTO student ( student_name ) VALUES ( 'Jones' );
INSERT INTO student ( student_name ) VALUES ( 'Smith' );
INSERT INTO student ( student_name ) VALUES ( 'Baker' );

-- Insert data into faculty table
INSERT INTO faculty ( faculty_name, faculty_phone ) VALUES ( 'Howser', '60192' );
INSERT INTO faculty ( faculty_name, faculty_phone ) VALUES ( 'Langley', '45869' );

-- Insert data into course table
INSERT INTO course ( course_id, faculty_id, course_name ) VALUES ( 'IS318', 1, 'Database' );
INSERT INTO course ( course_id, faculty_id, course_name ) VALUES ( 'IS301', 2, 'EC' );

-- Insert data into students_grade table
INSERT INTO students_grade ( student_id, course_id, student_grade ) VALUES ( 1, 'IS318', 'A' );
INSERT INTO students_grade ( student_id, course_id, student_grade ) VALUES ( 1, 'IS301', 'B' );
INSERT INTO students_grade ( student_id, course_id, student_grade ) VALUES ( 2, 'IS318', 'A' );
INSERT INTO students_grade ( student_id, course_id, student_grade ) VALUES ( 3, 'IS318', 'B' );
INSERT INTO students_grade ( student_id, course_id, student_grade ) VALUES ( 4, 'IS301', 'A' );
INSERT INTO students_grade ( student_id, course_id, student_grade ) VALUES ( 4, 'IS318', 'B' );

-- Practice Questions ⚠️ Don't consider the Questions. Just practice the queries
--Q1. Display students_grade student_id,course_id,student_grade in asc order of student_id
SELECT student_id,course_id,student_grade
FROM students_grade
ORDER BY student_id;

--Q2. Display students_grade student_id,course_id,student_grade in asc order of course_id
SELECT student_id,course_id,student_grade
FROM students_grade
ORDER BY course_id;

--Q3. Display students_grade student_id,course_id,student_grade in asc order of student_grade
SELECT student_id,course_id,student_grade
FROM students_grade
ORDER BY student_grade;

--Q4. Display students_grade student_id,course_id,student_grade in asc order of student_id,course_id
SELECT student_id,course_id,student_grade
FROM students_grade
ORDER BY student_id,course_id;

--Q5. Display students_grade student_id,course_id,student_grade in asc order of student_id,course_id,student_grade
SELECT student_id,course_id,student_grade
FROM students_grade
ORDER BY student_id,course_id,student_grade;

--Q6. Display students_grade student_id,course_id,student_grade in asc order of course_id,student_grade
SELECT student_id,course_id,student_grade
FROM students_grade
ORDER BY course_id,student_grade;

--Q7. Fetch 5 top students_grade earning highest
SELECT * FROM students_grade
ORDER BY student_grade DESC
FETCH FIRST 5 ROWS ONLY;

--Q8. Fetch 2nd Highest salaried students_grade details
SELECT * FROM students_grade
ORDER BY student_grade DESC
OFFSET 1 ROW FETCH FIRST 1 ROWS ONLY;

--Q9. Display list of all students_grade working in department 2
SELECT * FROM students_grade
WHERE student_id = 2;

--Q10. Display list of all students_grade working in department 3
SELECT * FROM students_grade
WHERE student_id = 3;

--Q11. Display list of all students_grade working in department 4
SELECT * FROM students_grade
WHERE student_id = 4;

-- Q12. Display list of all students_grade working as ANALYST
SELECT * FROM students_grade
WHERE student_grade = 'A';

-- Q13. Display list of all students_grade working as CLERK
SELECT * FROM students_grade
WHERE student_grade = 'B';

-- Q14. Display list of all students_grade working as SALESMAN
SELECT * FROM students_grade
WHERE student_grade = 'C';

-- Q15. Display list of all students_grade working as PRESIDENT
SELECT * FROM students_grade
WHERE student_grade = 'D';

-- Q16. Display list of all students_grade EARNING SAL BETWEEN 500 TO 4000
SELECT * FROM students_grade
WHERE student_grade BETWEEN 'A' AND 'B';

-- Q17. Display list of all students_grade EARNING SAL NOT BETWEEN 500 TO 4000
SELECT * FROM students_grade
WHERE student_grade NOT BETWEEN 'A' AND 'B';

-- Q18. COMPARISON
-- Q18.A. Display list of all students_grade EARNING SAL >500
SELECT * FROM students_grade
WHERE student_grade > 'A';

-- Q18.B. Display list of all students_grade EARNING SAL <500
SELECT * FROM students_grade
WHERE student_grade < 'A';

-- Q18.C. Display list of all students_grade EARNING SAL <=500
SELECT * FROM students_grade
WHERE student_grade <= 'A';

-- Q18.D. Display list of all students_grade EARNING SAL <=500
SELECT * FROM students_grade
WHERE student_grade >= 'A';

-- Q18.E. Display list of all students_grade EARNING SAL !=800
SELECT * FROM students_grade
WHERE student_grade != 'A';

-- Q18.F. Display list of all students_grade EARNING SAL =5000
SELECT * FROM students_grade
WHERE student_grade = 'A';

-- Q19. LOGICAL OPERATOR AND OR NOT/LIKE/IN/NOT IN/BETWEEN NOT BETWEEN
-- Q19.A DISPLAY EMPLOYEE WORKING IN DEPARTMENT 10 AS CLERK
SELECT * FROM students_grade
WHERE student_id = 1 AND course_id = 'IS318';


-- Q20. DISPLAY UNIUE JOB FROM EMPLOYE TABLE
SELECT DISTINCT course_id 
FROM students_grade;